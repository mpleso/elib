// autogenerated: do not edit!
// generated from gentemplate [gentemplate -d Package=elib -id fibNode -d VecType=fibNodeVec -d Type=fibNode vec.tmpl]

package elib

type fibNodeVec []fibNode

func (p *fibNodeVec) Resize(n uint) {
	c := Index(cap(*p))
	l := Index(len(*p)) + Index(n)
	if l > c {
		c = NextResizeCap(l)
		q := make([]fibNode, l, c)
		copy(q, *p)
		*p = q
	}
	*p = (*p)[:l]
}

func (p *fibNodeVec) validate(i uint, zero *fibNode) *fibNode {
	c := Index(cap(*p))
	l := Index(i) + 1
	if l > c {
		cNext := NextResizeCap(l)
		q := make([]fibNode, cNext, cNext)
		copy(q, *p)
		if zero != nil {
			for i := c; i < cNext; i++ {
				q[i] = *zero
			}
		}
		*p = q[:l]
	}
	if l > Index(len(*p)) {
		*p = (*p)[:l]
	}
	return &(*p)[i]
}
func (p *fibNodeVec) Validate(i uint) *fibNode                   { return p.validate(i, (*fibNode)(nil)) }
func (p *fibNodeVec) ValidateInit(i uint, zero fibNode) *fibNode { return p.validate(i, &zero) }

func (p fibNodeVec) Len() uint { return uint(len(p)) }
