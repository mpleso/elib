// autogenerated: do not edit!
// generated from gentemplate [gentemplate -d Package=mctree -id pair_offset -d VecType=pair_offset_vec -d Type=pair_offset github.com/platinasystems/go/elib/vec.tmpl]

package mctree

import (
	"github.com/platinasystems/go/elib"
)

type pair_offset_vec []pair_offset

func (p *pair_offset_vec) Resize(n uint) {
	c := elib.Index(cap(*p))
	l := elib.Index(len(*p)) + elib.Index(n)
	if l > c {
		c = elib.NextResizeCap(l)
		q := make([]pair_offset, l, c)
		copy(q, *p)
		*p = q
	}
	*p = (*p)[:l]
}

func (p *pair_offset_vec) validate(new_len uint, zero *pair_offset) *pair_offset {
	c := elib.Index(cap(*p))
	lʹ := elib.Index(len(*p))
	l := elib.Index(new_len)
	if l <= c {
		// Need to reslice to larger length?
		if l >= lʹ {
			*p = (*p)[:l]
		}
		return &(*p)[l-1]
	}
	return p.validateSlowPath(zero, c, l, lʹ)
}

func (p *pair_offset_vec) validateSlowPath(zero *pair_offset,
	c, l, lʹ elib.Index) *pair_offset {
	if l > c {
		cNext := elib.NextResizeCap(l)
		q := make([]pair_offset, cNext, cNext)
		copy(q, *p)
		if zero != nil {
			for i := c; i < cNext; i++ {
				q[i] = *zero
			}
		}
		*p = q[:l]
	}
	if l > lʹ {
		*p = (*p)[:l]
	}
	return &(*p)[l-1]
}

func (p *pair_offset_vec) Validate(i uint) *pair_offset {
	return p.validate(i+1, (*pair_offset)(nil))
}

func (p *pair_offset_vec) ValidateInit(i uint, zero pair_offset) *pair_offset {
	return p.validate(i+1, &zero)
}

func (p *pair_offset_vec) ValidateLen(l uint) (v *pair_offset) {
	if l > 0 {
		v = p.validate(l, (*pair_offset)(nil))
	}
	return
}

func (p *pair_offset_vec) ValidateLenInit(l uint, zero pair_offset) (v *pair_offset) {
	if l > 0 {
		v = p.validate(l, &zero)
	}
	return
}

func (p pair_offset_vec) Len() uint { return uint(len(p)) }
