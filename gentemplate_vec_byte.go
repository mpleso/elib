// autogenerated: do not edit!
// generated from gentemplate [gentemplate -d Package=elib -id Byte -d VecType=ByteVec -d Type=byte vec.tmpl]

package elib

type ByteVec []byte

func (p *ByteVec) Resize(n uint) {
	c := Index(cap(*p))
	l := Index(len(*p)) + Index(n)
	if l > c {
		c = NextResizeCap(l)
		q := make([]byte, l, c)
		copy(q, *p)
		*p = q
	}
	*p = (*p)[:l]
}

func (p *ByteVec) validate(i uint, zero *byte) *byte {
	c := Index(cap(*p))
	l := Index(i) + 1
	if l > c {
		cNext := NextResizeCap(l)
		q := make([]byte, cNext, cNext)
		copy(q, *p)
		if zero != nil {
			for i := c; i < cNext; i++ {
				q[i] = *zero
			}
		}
		*p = q[:l]
	}
	if l > Index(len(*p)) {
		*p = (*p)[:l]
	}
	return &(*p)[i]
}
func (p *ByteVec) Validate(i uint) *byte                { return p.validate(i, (*byte)(nil)) }
func (p *ByteVec) ValidateInit(i uint, zero byte) *byte { return p.validate(i, &zero) }

func (p ByteVec) Len() uint { return uint(len(p)) }
